<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plano de Teste" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variáveis Definidas Pelo Usuário" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Grupo de Usuários" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador de Iteração" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1501508784000</longProp>
        <longProp name="ThreadGroup.end_time">1501508784000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Entrar na página" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">186.237.202.19</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cervello_teste/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gerenciador de Cabeçalhos HTTP" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__VIEWSTATE" enabled="true">
            <stringProp name="HtmlExtractor.refname">viewstate</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__VIEWSTATE]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">erro view</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl">JODD</stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__VIEWSTATEGENERATOR" enabled="true">
            <stringProp name="HtmlExtractor.refname">viewGenerator</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__VIEWSTATEGENERATOR]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">Erro __VIEWSTATEGENERATOR</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__EVENTVALIDATION" enabled="true">
            <stringProp name="HtmlExtractor.refname">eventValidation</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__EVENTVALIDATION]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">Erro validation</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fazer o Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                <stringProp name="Argument.value">${viewstate}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                <stringProp name="Argument.value">${viewGenerator}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__VIEWSTATEENCRYPTED" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__VIEWSTATEENCRYPTED</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                <stringProp name="Argument.value">${eventValidation}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtLogin" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtLogin</stringProp>
                <stringProp name="Argument.value">renan.elias</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtSenha" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtSenha</stringProp>
                <stringProp name="Argument.value">cervello01</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$btnLogar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$btnLogar</stringProp>
                <stringProp name="Argument.value">Entrar</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtErro2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtErro2</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtLoginMomento" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtLoginMomento</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtInfop" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtInfop</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtADM" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtADM</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="txtFazIssoAi" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">txtFazIssoAi</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="info_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">info_s</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">186.237.202.19</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/cervello_teste/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gerenciador de Cabeçalhos HTTP" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://186.237.202.19/cervello_homolog/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__VIEWSTATE" enabled="true">
            <stringProp name="HtmlExtractor.refname">viewstates</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__VIEWSTATE]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">erro viewa</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl">JODD</stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__EVENTVALIDATION" enabled="true">
            <stringProp name="HtmlExtractor.refname">eventValidation</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__EVENTVALIDATION]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">Erro eventValidation</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__VIEWSTATEGENERATOR" enabled="true">
            <stringProp name="HtmlExtractor.refname">viewGenerator</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__VIEWSTATEGENERATOR]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">Erro __VIEWSTATEGENERATOR</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Escolher o usuário" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                <stringProp name="Argument.value">${viewstates}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                <stringProp name="Argument.value">${viewGenerator}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__VIEWSTATEENCRYPTED" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__VIEWSTATEENCRYPTED</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                <stringProp name="Argument.value">${eventValidation}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtLoginADM" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtLoginADM</stringProp>
                <stringProp name="Argument.value">renan.elias</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$btnLogarADM" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$btnLogarADM</stringProp>
                <stringProp name="Argument.value">Entrar</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtErro2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtErro2</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtLoginMomento" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtLoginMomento</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtInfop" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtInfop</stringProp>
                <stringProp name="Argument.value">${txtInfo}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1$txtADM" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">UC_Login1$txtADM</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="txtFazIssoAi" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">txtFazIssoAi</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="info_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">info_s</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">186.237.202.19</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/cervello_teste/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gerenciador de Cabeçalhos HTTP" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://186.237.202.19/cervello_homolog/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__Info_s" enabled="true">
            <stringProp name="HtmlExtractor.refname">txtinfoInforma</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =txtInfo]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">erro info_s</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">0</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__VIEWSTATE" enabled="true">
            <stringProp name="HtmlExtractor.refname">viewstates</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__VIEWSTATE]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">erro view</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl">JODD</stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__txtInfo" enabled="true">
            <stringProp name="HtmlExtractor.refname">txtInfo</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =UC_Login1_txtInfop]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">erro info</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">0</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__EVENTVALIDATION" enabled="true">
            <stringProp name="HtmlExtractor.refname">eventValidation</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__EVENTVALIDATION]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">Erro eventValidation</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">0</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__VIEWSTATEGENERATOR" enabled="true">
            <stringProp name="HtmlExtractor.refname">viewGenerator</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__VIEWSTATEGENERATOR]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">Erro __VIEWSTATEGENERATOR</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="__PREVIOUSPAGE" enabled="true">
            <stringProp name="HtmlExtractor.refname">previousPage</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =__PREVIOUSPAGE]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">arro previouspage</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">1</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Página Inicial" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="__EVENTTARGET" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__EVENTTARGET</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__EVENTARGUMENT" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__EVENTARGUMENT</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                <stringProp name="Argument.value">${viewstates}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                <stringProp name="Argument.value">${viewGenerator}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__VIEWSTATEENCRYPTED" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__VIEWSTATEENCRYPTED</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__PREVIOUSPAGE" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__PREVIOUSPAGE</stringProp>
                <stringProp name="Argument.value">${previousPage}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                <stringProp name="Argument.value">${eventValidation}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1%24txtLoginADM" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">UC_Login1%24txtLoginADM</stringProp>
                <stringProp name="Argument.value">renan.elias</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1%24txtErro2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">UC_Login1%24txtErro2</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1%24txtLoginMomento" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">UC_Login1%24txtLoginMomento</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1%24txtInfop" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">UC_Login1%24txtInfop</stringProp>
                <stringProp name="Argument.value">${txtInfo}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="UC_Login1%24txtADM" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">UC_Login1%24txtADM</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="btnRedirect" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">btnRedirect</stringProp>
                <stringProp name="Argument.value">Button</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="txtFazIssoAi" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">txtFazIssoAi</stringProp>
                <stringProp name="Argument.value">${txtinfoInforma}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="info_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">info_s</stringProp>
                <stringProp name="Argument.value">${txtinfoInforma}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">186.237.202.19</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/cervello_teste/cerMain.aspx#</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gerenciador de Cabeçalhos HTTP" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://186.237.202.19/cervello_homolog/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Campo autenticação do usuário" enabled="true">
            <stringProp name="HtmlExtractor.refname">infoCadastro</stringProp>
            <stringProp name="HtmlExtractor.expr">input[id =txtInfo]</stringProp>
            <stringProp name="HtmlExtractor.attribute">value</stringProp>
            <stringProp name="HtmlExtractor.default">erro info_s</stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            <stringProp name="HtmlExtractor.match_number">0</stringProp>
            <stringProp name="HtmlExtractor.extractor_impl">JODD</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </HtmlExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Abrir Chamado" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;info_s&quot;:${infoCadastro},	&#xd;
&quot;Codigo&quot;:&quot;0&quot;,&#xd;
&quot;UsuarioCodigo&quot;:&quot;235&quot;,&#xd;
&quot;Fuso&quot;:&quot;0&quot;,&#xd;
&quot;ProjetoCodigo&quot;:&quot;102&quot;,&#xd;
&quot;TipoCodigo&quot;:&quot;104&quot;,&#xd;
&quot;AssuntoCodigo&quot;:&quot;110&quot;,&#xd;
&quot;TempoAlvo&quot;:&quot;01:00&quot;,&#xd;
&quot;TempoProposto&quot;:&quot;01:00&quot;,&#xd;
&quot;dsk_Bem&quot;:&quot;&quot;,&#xd;
&quot;PrioridadeCromionCodigo&quot;:&quot;2&quot;,&#xd;
&quot;FilialCodigo&quot;:&quot;1&quot;,&#xd;
&quot;PrioridadeCodigo&quot;:&quot;1&quot;,&#xd;
&quot;FormadeSolicitacaoCodigo&quot;:&quot;101&quot;,&#xd;
&quot;ccCusteioCodigo&quot;:&quot;0&quot;,&quot;nCall&quot;:&quot;0&quot;,&#xd;
&quot;ChamadoRetrabalho&quot;:&quot;0&quot;,&#xd;
&quot;TipoChamadoCodigo&quot;:&quot;102&quot;,&#xd;
&quot;CausaCodigo&quot;:&quot;1&quot;,&#xd;
&quot;FormaAtendimentoCodigo&quot;:&quot;1&quot;,&#xd;
&quot;ccProjetoCodigo&quot;:0,&#xd;
&quot;DataChamado&quot;:&quot;03/08/2017&quot;,&#xd;
&quot;DataOcorrencia&quot;:&quot;03/08/2017&quot;,&#xd;
&quot;HoraAbertura&quot;:&quot;16:48&quot;,&#xd;
&quot;HoraOcorrencia&quot;:&quot;16:48&quot;,&#xd;
&quot;NumeroExterno&quot;:&quot;&quot;,&#xd;
&quot;UsuariosAfetados&quot;:&quot;1&quot;,&#xd;
&quot;Descricao&quot;:&quot;sqa&quot;,&#xd;
&quot;Resumo&quot;:&quot;&quot;,&#xd;
&quot;zerarSla&quot;:0,&#xd;
&quot;CentroCusto_NetService&quot;:&quot;&quot;,&#xd;
&quot;EnviaEmailAbertura&quot;:0,&#xd;
&quot;CodigoUrgencia&quot;:&quot;1&quot;,&#xd;
&quot;CodigoImpacto&quot;:&quot;1&quot;,&#xd;
&quot;CodigoChamadoPai&quot;:&quot;0&quot;,&#xd;
&quot;EnviaEmailAvisoSLA&quot;:0,&#xd;
&quot;eForms&quot;:[{&quot;name&quot;:&quot;txtStatusCampos&quot;,&quot;value&quot;:&quot;&quot;},&#xd;
{&quot;name&quot;:&quot;txtCodigoFormulario&quot;,&quot;value&quot;:&quot;0&quot;}],&#xd;
&quot;CodigoLocalidade&quot;:&quot;0&quot;,&#xd;
&quot;UsuarioCodigoSolicitante&quot;:&quot;235&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">186.237.202.19</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/cervello_teste-Atendimento/Services/svDesk.svc/GravaChamado</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;info123&quot;, vars.get(&quot;infoCadastro&quot;));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://186.237.202.19/Cervello_homolog-Atendimento/DeskHome.aspx?info_s=NjtzkXyWhWQYdfxt%2bj5iLO3kBeyjYpGFbNK7FRu1LWwMA2K%2bLMQ1BXq%2fuKToSpe0WwZmVALASXg%2fKyLSa7K9Bx%2bwgMcHwyTy0vmOQB4hKhxqwQZiwmQMw2BlQ22%2bBAoPzD5rfCElREdFo1dp%2bu0t29r5%2fwXomLRMrFp331BiM3rjMI1LMQ%2bqRpzvO1nZodckccV40bJvJ%2fsiB4lR1VwdBapoqLynChVwQqUF49SfPdnSO0PdjAyplTrrQB%2b5i2Mu%2bLo%2b6b7sdWFq3sMydOdkiK%2bImVKXPNAjRqa3dMIJwcC1Hg%2b7KpI66JE1%2b7cqQgU4dyYDvc2nsgFC0gocSUN%2fQljSwvahWFzd%2f5GG77raqmyvN%2fSOtnB106s7ZyHWephK%2faIsB70LPSrrPHQkx%2fgbQRqVQiYW9jDSf9oTuufMe9rHG1YTTJErN8SfQdOR2J1EJLT2cH5C%2b5v4IengeNGslnIltogvdJEAB7nMihFTjHKZVqq8VczLiPS%2fNdxvM%2f3isyKrp7v2%2fSCopt7S8Ix4y5103z1iJW2BYd0IXTVNyt8JSkHgfzMpOpUHrUqqxBhffeX7DH4gSS3oqFyjwA4swpCJM242CAA25FYwOq0TmGcQV%2bgx8coKp9C061RsC5Hp8Zc99q75tAz%2bNGdxv1NXFmUGU7YnICH%2brKzAxS3q%2faNRk47tTFcepYM59ACVpdlmU925piN3BOcYB5pAnxEM22gEkZB%2fjHbMSFIH2V3dC3yjSoe4dg0DWLNF1mUwrWEp%2bxoEt6BZw8DW7FWdRkLiWlADVaOzekzrOeoD4SbURIYlgH1Xc5rNEbB7hHMvDeaMXKDjOzFerufAsIN8PzFhnhT0T2q5n6ruYfJRuzgb5t7pSwsupCol%2fbipqGW2xajeuDZog0vOcmC6e0SCk%2bBH8FBx%2fG6N4GN2H3PNSvErIULc562wCU%2fenNl3I6ugn0QWz%2b0oHar%2feO%2bS5z3WX60bDUgCyqMyjvDefQ862koQAnBRg2iGRQ75aVEE22spPCBEZ6DfvDX5VubV0Zoe0ioDe%2fQTywGX7nrGtqEFEnBt6%2ftv%2fhqW4DdIyqq%2fkjXomb37M29gqO0loMV0I0TX8KoSAfuEwpnMbUnfMbOUC4wkaZoGZ0FQBxNVY0pVPtdAy%2bpE5pT5xG5CZAd7y8UdUwRLUzKkVBHLhTBh9wLgr81Qe9%2fUiCoQpH4c5nhjdkMxMlIbOB3aZVLC6Kr3SE247FTRRa9BXqscDkaDQSkl9zcNkfWWmadGjljFi10HK0dlpq9ZK%2f9TcVQIE8Wi76jIFt3p0qf5A6Q55b08ImIlsezi5AcjeVxkTdzHggFYe02wbc9l%2bJKtrVURZlVKeTk8uVCxWTXECWiiUxQkV9dMg45m4tvTzRMuHdwD4Bc2T0x3QWIO81GxFwxonMXIJhddB4V1ksi5GA0VkUopQkU%2fhIP49VZKKZOBUzYMJigIa%2fEj63cqVfNTS7d6qI3fKAfWhfKHRfrPQ4yOzY0X0dGF8b5TRbY%3d</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">pt-BR,pt;q=0.8,en-US;q=0.6,en;q=0.4</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://186.237.202.19</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">chamado</stringProp>
            <stringProp name="RegexExtractor.regex">[1-9]{1,4}</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">00</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;infoglob&quot;, vars.get(&quot;info123&quot;));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Incluir ação" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;info_s&quot;:${infoglob},&quot;Codigo&quot;:&quot;0&quot;,&quot;CodigoChamado&quot;:${chamado},&quot;DataInicio&quot;:&quot;08/08/2017&quot;,&quot;HoraInicio&quot;:&quot;16:53&quot;,&quot;DataFim&quot;:&quot;08/08/2017&quot;,&quot;HoraFim&quot;:&quot;16:55&quot;,&quot;Fuso&quot;:1,&quot;AnaDe&quot;:&quot;Renan Elias&quot;,&quot;AnaPara&quot;:&quot;Renan Elias&quot;,&quot;CodigoAnaDe&quot;:&quot;116&quot;,&quot;CodigoAnaPara&quot;:&quot;116&quot;,&quot;Percentual&quot;:&quot;0&quot;,&quot;Estado&quot;:&quot;100&quot;,&quot;Tipo&quot;:&quot;100&quot;,&quot;Agendamento&quot;:&quot;&quot;,&quot;CodigoAgendamento&quot;:&quot;0&quot;,&quot;PrimAtendimento&quot;:false,&quot;UsuLiberado&quot;:false,&quot;Publica&quot;:true,&quot;EnviaUsuario&quot;:false,&quot;IncluiDica&quot;:false,&quot;EnviaAnalista&quot;:false,&quot;DataInicioAgendamento&quot;:&quot;&quot;,&quot;HoraInicioAgendamento&quot;:&quot;&quot;,&quot;DataFimAgendamento&quot;:&quot;&quot;,&quot;HoraFimAgendamento&quot;:&quot;&quot;,&quot;Descricao&quot;:&quot;teste 123&quot;,&quot;Adicional1&quot;:&quot;&quot;,&quot;Adicional2&quot;:&quot;&quot;,&quot;Adicional3&quot;:&quot;&quot;,&quot;Adicional4&quot;:&quot;&quot;,&quot;PalavraChave&quot;:&quot;&quot;,&quot;EnviaAgendamento&quot;:false,&quot;EnviaObservadores&quot;:false,&quot;FirstCall&quot;:false,&quot;txtAlteraCausa&quot;:0,&quot;txtAlteraFormaDeAtendimento&quot;:0,&quot;txtCodigoFormaAtendimento&quot;:&quot;101&quot;,&quot;txtCodigoCausa&quot;:&quot;102&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">186.237.202.19</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Cervello_Teste-Atendimento/Services/svAcao.svc/GravaAcao</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Pré-Processador BeanShell" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters">$infoCadastro</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">vars.put(&quot;info456&quot;,vars.get(&quot;infoglob&quot;));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gerenciador de Cabeçalhos HTTP" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://186.237.202.19/Cervello_Teste-Atendimento/Acao.aspx?info_s=NjtzkXyWhWQYdfxt%2bj5iLO3kBeyjYpGFbNK7FRu1LWwMA2K%2bLMQ1BXq%2fuKToSpe0WwZmVALASXgnEPlvhio8dhnlbTppoaPD4Rmc9DKKq%2fT55w8d92qgOkwcdFlGuqqnLNWLuorMNR0MUhKbocDoDtvZALScZiEkVdjjcOr18I%2fm%2byGKqZbHKbgnNipMIjvcY55CtOUmUA8W6g2duuGwH3TYn2vAyPeyO6382tPQdONYGUE6MAV9TxcJ7Y%2fvxIOB4fxI4qTZClyuo7v53LG7LgsigEQDbkF8lo2Kk0W4zcSvRJ9wCe0A%2bxR6Fr6gHjp8m%2bjp7vRehWXxi84BIzTxtHq2YBk%2b%2b%2fv%2f%2f5%2bPbJuc9N%2f3yiAXJOcrwH9TFq8XvQB2Wo4bojIciVxYUw9sX%2blzEmBap%2fyANvsG4pjNBfcelZiwwnAA59l78yPSC8kxjw5nYQxuHbJXZM68RUal1OFeVxeOapdG6Gy%2fqbvLLvg%2fKyVLaHv6IiysES8nSnNbR7ShjghA1Nj%2fGdbcVzO63%2fRGIoe3noYmzkTmw4wi0%2bjrffVNlDK%2fCXpr0Y0V2TqOvwl0kuOfafT8iafLZax8zIUCR5INM7jg0Tr4sgTeo0GXoHEpb8Ga8Rx3mHce0icZZGxTsNJlGjqwssofe1NuqXAk9FCyWmViBlio6SNRW%2fjNCpG35PXrsEWmmMDU1vxYAXcAkd2WS5rMwnytCZMhIxy9EeOZfQ5pnOJaVfRcYpiXSwPeLFhhldw5x72oDsWDHAg42%2bg85TI5keRk%2fajU5ZJoCgjvdTLGhD6HemUyXv2909luA7%2fffxuxGBxfXD%2bVKXiqwWUkqBHhfLsp5cNeLLX0q0pVIHYMPDXj9Pa1cTj%2ffCAgppkbjFiuL7XgutC%2f6AdDe%2f%2bN0NnM%2bM8V7VAXKXZylqc9RoTh6EOFkTmP0eQec7vY5UktCQF1OJGWe2TaxGejop8%2budl1qk%2bqsg53s2CWZfjtx3laBftv6eDz7HLIz%2bg5UTUFi3aFhZeVh1N0nzVN%2bbCNo%2fHh9EzOn%2bXpyikkvywizRRqDgWBHSbVzMtsctA4ktvdBwRRTdOY9WQJQH0rd%2fsnzRi1bOiWWPTrVYJY%2fzFTixXHka9koyhS6co2eBFYz2Re4DOZtMtBfgLuJXfh8fKW2tFBeofUVxRBa%2f%2bnQzmtv%2b39AV%2fX8xU1GRZXg0bNB3qHkGc9bEQ1UsgsZCHjRZtuDdxvFAMzoKXcgW7MVpvycIedwISSuqd%2bileaWqKGTYifl6msUm7XF49uBLgB6qm5p6T5prh4u9yjfb%2fSJn0ONkL8XjUwGihAF6mbnQHeHpXEV5I6EnZu5AcxdV%2bAWBrn1Z7NewXE1vq92oOeF4UREWK69iviIk79hcS5Gn3utTSNGS9NbQLLCQxg1I8CMaShZQC5BTp9s%2bIu%2fGYiupPSjBjDc23KXfiEHPElbOu4QEYOV2OUh4ZqS7XOl43zWCfV93kVzrtLXKBluciwVmTL%2fzecjYQ%2bbHK0fJCftgY%3d&amp;ic=undefined&amp;ich=1349&amp;ca=130&amp;formatend=101&amp;causa=102&amp;cd=&amp;cf=1&amp;dt=%2fpWgzUoddudZ0GAQsVDms68WIy4Xz0cu</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="112 /Cervello_Teste-Atendimento/postDeskHome.aspx" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="load" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">load</stringProp>
                <stringProp name="Argument.value">1002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="info_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">info_s</stringProp>
                <stringProp name="Argument.value">NjtzkXyWhWQYdfxt+j5iLO3kBeyjYpGFbNK7FRu1LWwMA2K+LMQ1BXq/uKToSpe0WwZmVALASXgnEPlvhio8dhnlbTppoaPD4Rmc9DKKq/T55w8d92qgOkwcdFlGuqqnLNWLuorMNR0MUhKbocDoDtvZALScZiEkVdjjcOr18I/m+yGKqZbHKbgnNipMIjvcY55CtOUmUA8W6g2duuGwH3TYn2vAyPeyO6382tPQdONYGUE6MAV9TxcJ7Y/vxIOB4fxI4qTZClyuo7v53LG7LgsigEQDbkF8lo2Kk0W4zcSvRJ9wCe0A+xR6Fr6gHjp8m+jp7vRehWXxi84BIzTxtHq2YBk++/v//5+PbJuc9N/3yiAXJOcrwH9TFq8XvQB2Wo4bojIciVxYUw9sX+lzEmBap/yANvsG4pjNBfcelZiwwnAA59l78yPSC8kxjw5nYQxuHbJXZM68RUal1OFeVxeOapdG6Gy/qbvLLvg/KyVLaHv6IiysES8nSnNbR7ShjghA1Nj/GdbcVzO63/RGIoe3noYmzkTmw4wi0+jrffVNlDK/CXpr0Y0V2TqOvwl0kuOfafT8iafLZax8zIUCR5INM7jg0Tr4sgTeo0GXoHEpb8Ga8Rx3mHce0icZZGxTsNJlGjqwssofe1NuqXAk9FCyWmViBlio6SNRW/jNCpG35PXrsEWmmMDU1vxYAXcAkd2WS5rMwnytCZMhIxy9EeOZfQ5pnOJaVfRcYpiXSwPeLFhhldw5x72oDsWDHAg42+g85TI5keRk/ajU5ZJoCgjvdTLGhD6HemUyXv2909luA7/ffxuxGBxfXD+VKXiqwWUkqBHhfLsp5cNeLLX0q0pVIHYMPDXj9Pa1cTj/fCAgppkbjFiuL7XgutC/6AdDe/+N0NnM+M8V7VAXKXZylqc9RoTh6EOFkTmP0eQec7vY5UktCQF1OJGWe2TaxGejop8+udl1qk+qsg53s2CWZfjtx3laBftv6eDz7HLIz+g5UTUFi3aFhZeVh1N0nzVN+bCNo/Hh9EzOn+XpyikkvywizRRqDgWBHSbVzMtsctA4ktvdBwRRTdOY9WQJQH0rd/snzRi1bOiWWPTrVYJY/zFTixXHka9koyhS6co2eBFYz2Re4DOZtMtBfgLuJXfh8fKW2tFBeofUVxRBa/+nQzmtv+39AV/X8xU1GRZXg0bNB3qHkGc9bEQ1UsgsZCHjRZtuDdxvFAMzoKXcgW7MVpvycIedwISSuqd+ileaWqLIuq7CYAVA7v5w4ENEQ4ahKH73FkKN/AVTB3U4X6bjkDHgJ1/cDUWyPN64l1/PHcd/VCdygzf4EvgJsB69lF6NQgUV25ZGRklNVkke3Pg05KJiu0dAjra/PjVTqe03OTH8hRPUpmC4XBk/i2pjF5+r7e/Vi+KYjqVeECKJr0bTRNrtUWiHldI08tAfruU3rADfa3esTGH/Z3MOVPPEReZhRhoRTsAAt8T+tIUkJJzW/nXcTIXDZ1D/Q1ezm+NTpmY=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ic" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ic</stringProp>
                <stringProp name="Argument.value">1321</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">186.237.202.19</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Cervello_Teste-Atendimento/postDeskHome.aspx</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gerenciador de Cabeçalhos HTTP" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://186.237.202.19/Cervello_Teste-Atendimento/DeskHome.aspx?info_s=NjtzkXyWhWQYdfxt%2bj5iLO3kBeyjYpGFbNK7FRu1LWwMA2K%2bLMQ1BXq%2fuKToSpe0WwZmVALASXgnEPlvhio8dhnlbTppoaPD4Rmc9DKKq%2fT55w8d92qgOkwcdFlGuqqnLNWLuorMNR0MUhKbocDoDtvZALScZiEkVdjjcOr18I%2fm%2byGKqZbHKbgnNipMIjvcY55CtOUmUA8W6g2duuGwH3TYn2vAyPeyO6382tPQdONYGUE6MAV9TxcJ7Y%2fvxIOB4fxI4qTZClyuo7v53LG7LgsigEQDbkF8lo2Kk0W4zcSvRJ9wCe0A%2bxR6Fr6gHjp8m%2bjp7vRehWXxi84BIzTxtHq2YBk%2b%2b%2fv%2f%2f5%2bPbJuc9N%2f3yiAXJOcrwH9TFq8XvQB2Wo4bojIciVxYUw9sX%2blzEmBap%2fyANvsG4pjNBfcelZiwwnAA59l78yPSC8kxjw5nYQxuHbJXZM68RUal1OFeVxeOapdG6Gy%2fqbvLLvg%2fKyVLaHv6IiysES8nSnNbR7ShQ9fnGHpwNM4HdpA39DUmL8xmaLk%2f4Byec5MuRj1kKTpmcRd98HmyXoxcVRLm3tDc6fi%2bIBPgMOTjiocOhRGgFO3jcj67bXoj3qnYQKLctD8WQrIlBAfo%2f3OY7bhVslEqKGUrB0sTiS1zHnsGIdtXXqpD0xHLuUiocGWUkCLiyhIpWzvxK%2fiHcZQzuKvw0QA0SqNZKSpMoEMeoFQdi02shn5%2bm%2bWNqvCGPHFJ%2flT8MnAhjPa4SkuEQUObkQS%2b37ORV11ThhLtesa%2bk1mFxmxDsGcI5yU5SlvmZn8A4QAv1s8XHKXOErAKrJoj%2fKoWpnUx2t8aFGeqmv%2bcHhRfcLH6U4TLnbnZV45oT9A8m06Y7TzoT6a1vLSQ8P%2fAdtRTbom4WvpDsKG1Sdv6Vq005vDdJoTVioxaBYGxnar8tUmd9JfurzQwt0c%2bfFChCXxentjiHoCSx5yqbCPpxS9s9eNkc6rwJ4e2RpjS3Q%2f7tmwnKeoYwEFQKhCQ5dfFfN8RVcK4T3NrcxRA1RQ%2bZLhXVFLyU1JcQDYukcGIKSYuZ3%2bmqNMKwczDHUuqKFejG3fa%2bPbcmClPOyU8%2bF1JZsiGer7qV3olTXe7KcAhbY%2bSqnLE5c4L%2bbxpy9ZjreD4wAqRV%2fT7s4i%2f%2fKbM8M54%2bSZ%2bDfi7qaMrRe%2fnPPp1fyO952bnl9izzjgrjBK%2fslSZccYFkv8ifrLTxym8jwxufcFVZU%2b6h21PSn5k2tb7FT8Tx01ihhy8KOjCbrCzkUpW5CtxZzhBwbNBK2G%2fm7%2bkW6TF9yQJvmFGdvvo6cx2pFYURshHSM%2bQu2Z2fBMX0AtWJSPxtSZL86R%2b%2f8W3cQWeJXKbOvxdT1wGR7DT0ZBBncfV7%2feNGtUjCwi4JP8IFtKQxk0NBUho1CrqJTNRa82goTknjROz8UHwlplSb%2bpulmEHbQFW5uO%2fVm9Q2REOtwBRvW%2b6h%2boume60VxRBTVK3c%2barGcYi5vQCnFHX%2bN4NOGty7iPFfrw%3d</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Asserção BeanShell" enabled="true">
          <stringProp name="BeanShellAssertion.query">${__setProperty(infoglob, ${infoCadastro})};</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
        </BeanShellAssertion>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug testador" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árvore de Resultados" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="Área de Trabalho" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="Servidor HTTP Proxy" enabled="true">
        <stringProp name="ProxyControlGui.port">9191</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
